{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","this","squares","includes","board","children","j","push","renderSquare","React","Component","Game","state","history","Array","fill","lastMove","xIsNext","stepNumber","selectedButton","startToEnd","slice","current","length","calculateWinner","setState","move","status","winner","three","player","flag","allUsed","moves","map","step","desc","Math","floor","key","jumpTo","handleClick","handleToggle","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18fb601d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props) {\n    return (\n        <button \n            className={\"square \" + props.highlight}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n  }\n  \n  class Board extends React.Component {\n    renderSquare(i) {\n      return (<Square \n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        highlight={(this.props.highlight && this.props.highlight.includes(i))?'selected':''} />);\n    }\n  \n    render() {\n        const board = [];\n        for (let i = 0; i < 3; i++){\n            const children = [];\n            for (let j = 0; j < 3; j++){\n                children.push(this.renderSquare(i*3+j));\n            }\n            board.push(<div className=\"board-row\">{children}</div>);\n        }\n      return (\n          <div>\n              {board}\n          </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{squares: Array(9).fill(null), lastMove: null}],\n            xIsNext: true,\n            stepNumber: 0,\n            selectedButton: null,\n            startToEnd: true,\n        }\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length-1];\n        const squares = [...current.squares];\n        if(calculateWinner(squares) || squares[i]){\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X':'O';\n        this.setState({\n            history: [...history, {squares: squares, lastMove: i}], \n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n            selectedButton: null,\n        });\n    }\n\n    handleToggle() {\n        this.setState({\n            startToEnd: !this.state.startToEnd,\n        });\n    }\n\n    jumpTo(move) {\n        const history = this.state.history;\n        this.setState({\n            xIsNext: (move % 2) === 0,\n            stepNumber: move,\n            history: history,\n            selectedButton: move,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const highlight = winner? winner.three : null;\n        let status;\n        if(winner){\n            status = 'Winner: ' + winner.player;\n        }else if(allUsed(current.squares)){\n            status = 'Draw';\n        }else{\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        let moves = [];\n        if(this.state.startToEnd){\n            moves = history.map((step, move) =>{\n                const desc = move ? 'Go to move #' + move + ' at loc (' + Math.floor(step.lastMove/3) + ',' + step.lastMove%3 + ')': 'Go to game start';\n                return(\n                    <li key={move}>\n                        <button className={(move === this.state.selectedButton)? 'selected' : ''} onClick={() => this.jumpTo(move)}>{desc}</button>\n                    </li>\n                );\n            });\n        }else{\n            for(let i = history.length-1; i >= 0; i--){\n                const desc = (i === 0) ? 'Go to game start':'Go to move #' + i + ' at loc (' + Math.floor(history[i].lastMove/3) + ',' + history[i].lastMove%3 + ')';\n                moves.push(\n                    <li key={i}>\n                        <button className={(i === this.state.selectedButton)? 'selected' : ''} onClick={() => this.jumpTo(i)}>{desc}</button>\n                    </li>\n                );\n            }\n        }\n       \n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n                squares={current.squares} \n                onClick={(i) => this.handleClick(i)}\n                highlight={highlight}\n            />\n          </div>\n          <div className=\"game-info\">\n            <button onClick={() => this.handleToggle()}>Toggle</button>\n            <div>{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return {player: squares[a], three:lines[i]};\n      }\n    }\n    return null;\n  }\n\n  function allUsed(squares) {\n      let flag = true;\n      for(let i = 0; i < squares.length; i++){\n          if(!squares[i]){\n              flag = false;\n              break;\n          }\n      }\n      return flag;\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}